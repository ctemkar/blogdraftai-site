name: Auto-generate Blog Post

on:
  schedule:
    - cron: "0 2 * * 1"   # Monday 9AM Bangkok
  workflow_dispatch:
    inputs:
      topic:
        description: "Custom topic for the article"
        required: false
        default: "trending AI topic"

jobs:
  auto-post:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: pip install openai

    - name: Generate article with OpenAI
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        mkdir -p posts
        TODAY=$(date +'%Y-%m-%d')
        POST_FILE="posts/article-${TODAY}.html"

        python - <<'PYCODE'
import os, openai, datetime, json
openai.api_key = os.environ["OPENAI_API_KEY"]

today = datetime.date.today().strftime("%A, %B %d, %Y")

topic = os.getenv("INPUT_TOPIC", "trending AI topic")
meta_prompt = f"Generate a catchy blog title and a 2-sentence summary for a {topic} as of {today}. Respond in JSON with keys: title, summary."
meta_resp = openai.chat.completions.create(
    model="gpt-4o-mini",
    messages=[{"role": "user", "content": meta_prompt}],
    max_tokens=150,
)

try:
    meta = json.loads(meta_resp.choices[0].message.content.strip())
except Exception as e:
    meta = {"title": f"Weekly Blog Post - {today}", "summary": "Auto-generated article."}

title = meta.get("title", f"Weekly Blog Post - {today}")
summary = meta.get("summary", "Auto-generated article.")

article_prompt = f"Write a 600-word blog article titled '{title}' for {today}. Include useful insights and structure it with H2 subheadings."
article_resp = openai.chat.completions.create(
    model="gpt-4o-mini",
    messages=[{"role": "user", "content": article_prompt}],
    max_tokens=1000,
)
article_text = article_resp.choices[0].message.content

html = f"""<!DOCTYPE html>
<html>
<head><title>{title}</title></head>
<body>
<h1>{title}</h1>
<p><em>{summary}</em></p>
<div>{article_text}</div>
</body></html>"""

with open(f"posts/article-{today}.html", "w") as f:
    f.write(html)

# Save metadata for bash
with open